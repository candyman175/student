My Working Philosophy and Process Used for the Student Application

1. I didn't do a Web API for the student application because I thought it was too complicated.  A simple EF application was appropriate for such simple basic requirements.  As mentioned in the instructions for the application, I did include an example of a Web API application I did using jQuery. I believe in the KISS (Keep It Simple Stupid) principle which is violated frequently; in fact, I have a reputation of taking applications written by other people and reducing the code by as much as 2/3 with the same functionality: they made the application too complicated.
2. I also used the MVC design pattern for the student application as it "separates concerns"; in fact, you can take it a step further and use interfaces with dependency injection to make the application very flexible and easy to change.  Because of time constraints, I did not implement in this application though the applications I wrote at RealEC Technology use DI extensively.
3. I'm very "database oriented" and typically do as much processing on the database server as I can through parameter driven stored procedures, functions, etc. though again, because of time constraints, I did not implement in this application.   I have found that doing "database stuff" in code can be problematical in that it may be hard to locate a problem because the code is spread thoughout the application, and application performance can be degraded.  In addition I have seen companies spend a fortune programming around bad database designs so that in this case the programming was "necessary".  I almost became a Certified Oracle DBA besides over 20 years experience with SQL server so that, in many cases, I know more than the DBAs.  (However, I usually work very well with DBAs because of that).
4. I usually develop applications by "parts", testing each part separately.  It is sort of a Test Driven Design approach though my own version.  Which brings me to unit tests and which I'll discuss if your seatbelts are fastened. People do not know how to do unit tests.  Programmers waste a lot of time doing trivial tests which are unnecessary and which make customers unhappy because of the time taken to do them.  I highly recommend Roy Osherove's book, The Art of Unit Testing. Tests are frequently unnecessary. I like to use the "tools" provided to generate as much code as I can.  For example, I used EF Code First to generate the Student database and Students table.  I used VS2017 project/controller templates to generate the project and controller.  I used the Nuget Package Manager to include all of the assemblies and javascript files I needed.  Having said all of this, don't misunderstand me: novice programmers typically don't test enough.  You always test, whether informally through running code and/or formally incorporate into the application through unit tests.  I did not include unit tests because I felt they were unnecessary in this application.
5. As far as additional information on my approach to the student application, I like to use regular expressions for validations so I used the "ngPattern" angular directive. Even though client-side validation is done, you should also always do server-side validation.  Regarding the student application, I intentionally left in some "echos" so you can see how I do testing.  I was having trouble getting the angular validations to work so I put in some extra code to echo back what was happening.  I normally would not include that in the final version of the application.

6. I have frequently mentored young developers, like at RealEC Technology, to help them learn to avoid many pitfalls which programmers tend to fall into.